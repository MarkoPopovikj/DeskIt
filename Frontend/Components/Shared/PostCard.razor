@using Frontend.Models
@using Frontend.Services
@using System.Diagnostics

@inject AuthService AuthService
@inject PostService PostService
@inject CommunityService CommunityService
@inject NavigationManager NavigationManager

@if (Post != null)
{
    <article class="flex bg-white border border-gray-200 rounded-lg shadow-sm hover:border-gray-300 transition-all duration-200">
        <div class="flex flex-col items-center p-2 bg-gray-50 rounded-l-lg">
            <button @onclick=UpvotePostClick class="vote-btn p-1 rounded-md hover:bg-gray-200 text-gray-500 hover:text-orange-500 @(_currentVote == VoteStatus.Upvoted ? "upvoted" : "")">
                <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" /></svg>
            </button>
            <span class="text-sm font-bold my-1 text-gray-700">@Post.FormattedUpvotes</span>
            <button @onclick=DownvotePostClick class="vote-btn p-1 rounded-md hover:bg-gray-200 text-gray-500 hover:text-blue-500 @(_currentVote == VoteStatus.Downvoted ? "downvoted" : "")">
                <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" /></svg>
            </button>
        </div>
        <div class="p-4 flex-1">
            <div class="text-xs text-gray-500 mb-2">
                <a @onclick="GoToCommunity" class="cursor-pointer font-bold text-gray-800 hover:underline">d/@Post.CommunityName</a>
                <span class="mx-1">•</span>
                <span>Posted by <a @onclick="GoToUser" class="cursor-pointer hover:underline">u/@Post.AuthorName</a> @Post.TimeAgo</span>
            </div>
            <a href="post/@Post.Id" class="block">
                <h2 class="text-lg font-bold text-gray-900 mb-2 hover:text-blue-600">@Post.Title</h2>
            </a>

            @if (!string.IsNullOrEmpty(Post.ImageUrl))
            {
                <div class="relative my-4">
                    <img src="@($"https://placehold.co/600x300/E0E7FF/4F46E5?text={Post.ImageUrl}")"
                    alt="Post image for @Post.Title"
                    class="w-full max-h-96 object-cover rounded-md border border-gray-200" />
                </div>
            }
            else
            {
                <p class="text-sm text-gray-700 mb-4">
                    @if (Post.Content.Length > 200)
                    {
                        @($"{Post.Content.Substring(0, 200)}...")
                    }
                    else
                    {
                        @Post.Content
                    }
                </p>
            }

            <div class="flex items-center space-x-4 text-xs font-semibold text-gray-500">
                <a href="/topic/some-topic-id#comments" class="flex items-center space-x-1 hover:bg-gray-100 p-2 rounded-md">
                    <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" /></svg>
                    <span>@Post.CommentsCount Comments</span>
                </a>
            </div>
        </div>
    </article>
}

<style>
    .vote-btn.upvoted svg {
    fill: #fd4500;
    stroke: #fd4500;
    }

    .vote-btn.downvoted svg {
    fill: #3b82f6;
    stroke: #3b82f6;
    }
</style>

@code {
    [Parameter, EditorRequired]
    public PostModel? Post { get; set; }

    [Parameter, EditorRequired]
    public int StartingVote { get; set; }

    private enum VoteStatus { None, Upvoted, Downvoted }
    private VoteStatus _currentVote;
    private int action { get; set; } = -2;

    protected override void OnInitialized()
    {
        _currentVote = StartingVote switch
        {
            1 => VoteStatus.Upvoted,
            -1 => VoteStatus.Downvoted,
            _ => VoteStatus.None
        };

        StateHasChanged();
    }

    private async Task GoToUser()
    {
        if(Post.AuthorName == AuthService.CurrentUser.Username)
        {
            NavigationManager.NavigateTo("profile");
        }
        else
        {
            NavigationManager.NavigateTo($"user/{Post.AuthorName}");
        }
    }

    private async Task GoToCommunity()
    {
        bool result = await CommunityService.GetPostCommunityAsync(Post.CommunityName);

        if (!result)
        {
            return;
        }

        NavigationManager.NavigateTo($"community/{CommunityService.CurrentPostCommunity.Id}");
    }

    private async Task CheckUpvoteDownvote()
    {
        StateHasChanged();

        bool result = await PostService.UpdatePostUpvotesDownvotesAsync(Post.Id, action);

        if (!result)
        {
            return;
        }
    }

    private async Task UpvotePostClick()
    {
        if (_currentVote == VoteStatus.Upvoted)
        {
            Post.UpVotes--;
            _currentVote = VoteStatus.None;
        }

        else if (_currentVote == VoteStatus.Downvoted)
        {
            Post.DownVotes--;
            Post.UpVotes++;
            _currentVote = VoteStatus.Upvoted;
        }
        else
        {
            Post.UpVotes++;
            _currentVote = VoteStatus.Upvoted;
        }

        action = 1;

        await CheckUpvoteDownvote();
    }

    private async Task DownvotePostClick()
    {
        if (_currentVote == VoteStatus.Downvoted)
        {
            Post.DownVotes--;
            _currentVote = VoteStatus.None;
        }
        else if (_currentVote == VoteStatus.Upvoted)
        {
            Post.UpVotes--;
            Post.DownVotes++;
            _currentVote = VoteStatus.Downvoted;
        }
        else
        {
            Post.DownVotes++;
            _currentVote = VoteStatus.Downvoted;
        }

        action = -1;

        await CheckUpvoteDownvote();
    }
}