@page "/create_community"

@inject CommunityService CommunityService
@inject Blazored.Toast.Services.IToastService ToastService
@inject IJSRuntime JSRuntime

@using Frontend.Services
@using Frontend.Components.Shared
@using Frontend.Models
@using System.ComponentModel.DataAnnotations
@using System.Text.Json.Serialization
@using System.Diagnostics


@if (_isLoading)
{
    <Loading />
}
else
{
    <div class="grid grid-cols-1 xl:grid-cols-3 gap-6">
        <main class="py-6 xl:col-span-2">
            <div class="flex items-center mb-6">
                <button @onclick="GoBack" class="p-2 rounded-full hover:bg-gray-200 mr-2">
                    <svg class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                    </svg>
                </button>
                <h1 class="text-3xl font-bold text-gray-800">Create a Community</h1>
            </div>

            <EditForm Model="@_newCommunity" OnValidSubmit="HandleCreateCommunity">
                <DataAnnotationsValidator />

                <div class="bg-white rounded-lg shadow-sm">
                    <div class="p-6 space-y-6">
                        <div>
                            <label for="community-name" class="block text-sm font-bold text-gray-700">Name</label>
                            <div class="mt-1 flex rounded-md shadow-sm">
                                <span class="inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500 sm:text-sm">d/</span>
                                <InputText @bind-Value=_newCommunity.Name type="text" id="community-name" class="flex-1 block w-full px-3 py-2 border border-gray-300 rounded-none rounded-r-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="CommunityName" />
                            </div>
                            <ValidationMessage For="@(() => _newCommunity.Name)" class="text-red-600 text-sm mt-1" />
                            <p class="mt-2 text-xs text-gray-500">
                                Community names cannot be changed after they are created.
                            </p>
                        </div>

                        <div>
                            <label for="community-topic" class="block text-sm font-bold text-gray-700">Topic</label>
                            <InputSelect @bind-Value=_newCommunity.Topic id="community-topic" name="community-topic" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md shadow-sm">
                                <option selected disabled>Select a topic</option>
                                @foreach (KeyValuePair<string,string> topicPair in CommunityService.TopicDictionary)
                                {
                                    <option value="@topicPair.Key">@topicPair.Value</option>
                                }
                            </InputSelect>

                            <ValidationMessage For="@(() => _newCommunity.Topic)" class="text-red-600 text-sm mt-1" />
                            <p class="mt-2 text-xs text-gray-500">
                                This will help people discover your community.
                            </p>
                        </div>

                        <div>
                            <label class="block text-sm font-bold text-gray-700 mb-2">Community Color</label>
                            <div class="flex items-center space-x-4">
                                <div class="w-10 h-10 rounded-full border" style="background-color:@($"#{_newCommunity.BackgroundColor}")"></div>
                                <div class="relative">
                                    <button @onclick="ToggleColorMenu" @onclick:stopPropagation="true" type="button" class="bg-gray-200 text-gray-800 font-semibold py-2 px-4 rounded-full hover:bg-gray-300 transition text-sm">
                                        Change Color
                                    </button>

                                    @if (isColorMenuOpen)
                                    {
                                        <div @onclick:stopPropagation="true" class="absolute top-full mt-2 w-64 bg-white rounded-lg shadow-xl z-10 p-4 border border-gray-200 origin-top-left">
                                            <p class="text-sm font-semibold text-gray-600 mb-3 text-center">Select a Color</p>
                                            <div class="grid grid-cols-6 gap-2 mb-4">
                                                @foreach (var color in presetColors)
                                                {
                                                    <button type="button" @onclick="() => SelectColor(color)" class="w-8 h-8 rounded-full border hover:scale-110 transition-transform" style="background-color: @($"#{color}")"></button>
                                                }
                                            </div>
                                            <hr class="mb-3" />
                                            <label class="block text-sm font-semibold text-gray-600 mb-2">Custom Color</label>
                                            <div class="flex items-center space-x-3">
                                                <input type="color" @bind="_newCommunity.BackgroundColor" @bind:event="oninput" class="w-10 h-10 p-1 bg-white border border-gray-300 rounded-md cursor-pointer" />
                                                <input @bind="_newCommunity.BackgroundColor" class="w-full px-3 py-1.5 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" />
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                            <ValidationMessage For="@(() => _newCommunity.BackgroundColor)" class="text-red-600 text-sm mt-1" />
                        </div>

                        <div>
                            <label for="description" class="block text-sm font-bold text-gray-700">Description</label>
                            <InputText @bind-Value=_newCommunity.Description id="description" rows="4" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="Share what your community is about."></InputText>
                            <ValidationMessage For="@(() => _newCommunity.Description)" class="text-red-600 text-sm mt-1" />
                        </div>

                        <div class="flex justify-end pt-4 border-t">
                            <div @onclick="GoBack" class="bg-white py-2 px-4 border border-gray-300 rounded-full shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none">Cancel</div>
                            <button type="submit" class="ml-3 inline-flex justify-center py-2 px-6 border border-transparent shadow-sm text-sm font-bold rounded-full text-white bg-blue-600 hover:bg-blue-700 focus:outline-none">
                                Create Community
                            </button>
                        </div>
                    </div>
                </div>
            </EditForm>
        </main>

        <aside class="hidden xl:block py-6">
            <div class="sticky top-6">
                <div class="bg-white border border-gray-200 rounded-lg p-6">
                    <h3 class="text-md font-bold text-gray-900 mb-4">
                        Posting to DeskIt
                    </h3>
                    <ol class="list-decimal list-inside space-y-2 text-sm text-gray-600">
                        <li>Remember to be civil</li>
                        <li>Behave like you would in real life</li>
                        <li>Don't be racist</li>
                        <li>Search for duplicates before posting</li>
                    </ol>
                </div>
            </div>
        </aside>
    </div>
}

@code {
    private bool _isLoading = false;
    private string _errorMessage { get; set; } = null;
    private int _errorCounter = 0;

    private string? _selectedTopicValue;
    private CreateCommunityModel _newCommunity = new();

    private bool isColorMenuOpen = false;
    private readonly List<string> presetColors = new()
    {
        "ef4444", "f97316", "eab308", "84cc16", "22c55e", "14b8a6",
        "06b6d4", "3b82f6", "6366f1", "8b5cf6", "d946ef", "ec4899"
    };

    protected override async Task OnInitializedAsync()
    {
        await ForceReload();
    }

    private async Task ForceReload()
    {
        _isLoading = true;
        if (CommunityService.TopicDictionary != null && CommunityService.TopicDictionary.Count > 0)
        {
            _isLoading = false;
            return;
        }

        _errorMessage = null;

        await CheckTopicsExist();

        if(_errorCounter == 0)
        {
            _isLoading = false;
        }
        else
        {
            _errorMessage = "Something went wrong";
            ToastService.ShowError(_errorMessage);
        }

        StateHasChanged();
    }

    private async Task CheckTopicsExist()
    {
        bool result = await CommunityService.GetTopicsAsync();

        if (!result)
        {
            _errorCounter++;
        }
    }

    private void ToggleColorMenu() => isColorMenuOpen = !isColorMenuOpen;

    private void SelectColor(string color)
    {
        _newCommunity.BackgroundColor = color;
        isColorMenuOpen = false;
    }

    public async Task HandleCreateCommunity()
    {
        _isLoading = true;
        _errorMessage = null;

        var error = await CommunityService.CreateCommunityAsync(_newCommunity);
        _isLoading = false;


        if (error == null)
        {
            _errorMessage = "Community created successfully";
            _newCommunity = new();
            ToastService.ShowSuccess(_errorMessage);
        }
        else
        {
            _errorMessage = error;
            ToastService.ShowError(_errorMessage);
        }

		StateHasChanged();
    }

    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    public class CreateCommunityModel
    {
        private string _backgroundColor;

        [Required(ErrorMessage = "Name is required.")]
        [JsonPropertyName("name")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Description is required.")]
        [JsonPropertyName("description")]
        public string Description { get; set; }

        [Required(ErrorMessage = "Topic is required.")]
        [JsonPropertyName("topic")]
        public string Topic { get; set; }

        [Required(ErrorMessage = "Color is required.")]
        [JsonPropertyName("background_color")]
        public string BackgroundColor
        {
            get => _backgroundColor;

            set
            {
                _backgroundColor = value?.TrimStart('#');
            }
        }
    }
}