@page "/explore" 

@inject CommunityService CommunityService 
@inject Blazored.Toast.Services.IToastService ToastService

@using Frontend.Components.Shared 
@using Frontend.Models
@using Frontend.Services

@if (_isLoading)
{
    <Loading />
}
else
{
    <div class="grid grid-cols-1 xl:grid-cols-[1fr_320px] xl:gap-6 h-full">
        <div class="space-y-6 overflow-y-auto custom-scrollbar py-6">

            <div class="flex items-center justify-between">
                <h1 class="text-3xl font-bold text-gray-800">Explore Communities</h1>
                <button @onclick="ForceReload"
                class="p-2 rounded-full text-gray-500 hover:bg-gray-200 hover:text-gray-800 transition">
                    <svg xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    class="h-6 w-6">
                        <path stroke-linecap="round"
                        stroke-linejoin="round"
                        d="M21 12a9 9 0 11-3-6.708M21 3v6h-6" />
                    </svg>
                </button>
            </div>

            <div class="border-b border-gray-200">
                <div class="overflow-x-auto custom-scrollbar -mb-px">
                    <nav class="flex space-x-4 whitespace-nowrap">
                        @foreach (KeyValuePair<string, List<CommunitySimpleModel>> topic in CommunityDictionary)
                        {
                            <button @onclick="() => SelectTopic(topic)" class="topic-tab px-3 py-3 text-sm font-medium @(IsTopicActive(topic) ? "text-blue-600 border-b-2 border-blue-600" : "text-gray-500 hover:text-gray-700")">
                                @topic.Key
                            </button>
                        }
                    </nav>
                </div>
            </div>

            <CommunityCardHolder Communities="_selectedTopic.Value" />

        </div>

        <aside class="hidden xl:block">
            <div class="bg-white border border-gray-200 rounded-lg p-6 text-center">
                <svg class="h-16 w-16 mx-auto text-blue-500"
                fill="none"
                viewBox="0 0 24 24"
                stroke-width="1.5"
                stroke="currentColor">
                    <path stroke-linecap="round"
                    stroke-linejoin="round"
                    d="M12 9v6m3-3H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <h3 class="text-lg font-bold text-gray-900 mt-4">
                    Create Your Own Community
                </h3>
                <p class="text-sm text-gray-600 mt-2 mb-4">
                    Bring people together with a shared interest and start your own corner
                    of DeskIt.
                </p>
                <a href="create_community"
                class="block w-full bg-blue-600 text-white font-bold py-2.5 rounded-full hover:bg-blue-700 transition text-center">
                    Create Community
                </a>
            </div>
        </aside>
    </div>
}


@code{
    public Dictionary<string, List<CommunitySimpleModel>> CommunityDictionary => CommunityService.CommunityDictionary;

    private bool _isLoading { get; set; } = false;
    private string? _errorMessage { get; set; } = null;
    private int _errorCounter = 0;

    private KeyValuePair<string, List<CommunitySimpleModel>> _selectedTopic;

    protected override async Task OnInitializedAsync()
    {
        await ForceReload();

        StateHasChanged();
    }

    private async Task ForceReload()
    {
        _isLoading = true;

        _errorMessage = null;

        await CheckTopicExists();
        await CheckCommunitiesExists();
        await CheckMembershipExists();

        if (_errorCounter == 0)
        {
            _isLoading = false;

            _selectedTopic = CommunityService.CommunityDictionary.FirstOrDefault();
        }
        else
        {
            _errorMessage = "Something went wrong";
            ToastService.ShowError(_errorMessage);
        }

        StateHasChanged();
    }

    private async Task CheckTopicExists()
    {
        bool result = await CommunityService.GetTopicsAsync();

        if (!result)
        {
            _errorCounter++;
        }
    }

    private async Task CheckCommunitiesExists()
    {
        bool result = await CommunityService.GetSimpleCommunitiesAsync();

        if (!result)
        {
            _errorCounter++;
        }
    }

    private async Task CheckMembershipExists()
    {
        bool result = await CommunityService.GetJoinedCommunitiesAsync();

        if (!result)
        {
            _errorCounter++;
        }
    }

    private void SelectTopic(KeyValuePair<string, List<CommunitySimpleModel>> newTopic)
    {
        _selectedTopic = newTopic;
    }

    private bool IsTopicActive(KeyValuePair<string, List<CommunitySimpleModel>> topic)
    {
        return _selectedTopic.Key == topic.Key;
    }
}
