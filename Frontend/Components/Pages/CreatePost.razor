@page "/create_post"

@using Frontend.Models
@using Frontend.Services
@using Frontend.Components.Shared
@using System.ComponentModel.DataAnnotations
@using System.Text.Json.Serialization

@inject CommunityService CommunityService
@inject PostService PostService
@inject AuthService AuthService
@inject IJSRuntime JSRuntime
@inject Blazored.Toast.Services.IToastService ToastService


@if (_isLoading)
{
    <Loading />
}
else
{
    <div class="grid grid-cols-1 xl:grid-cols-3 gap-6">
        <main class="py-6 xl:col-span-2">
            <div class="flex items-center mb-6">
                <button @onclick="GoBack" class="p-2 rounded-full hover:bg-gray-200 mr-2">
                    <svg class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                    </svg>
                </button>
                <h1 class="text-3xl font-bold text-gray-800">Create a Post</h1>
            </div>

            @if (UserCommunities != null && UserCommunities.Count > 0)
            {
                <div class="bg-white rounded-lg shadow-sm">
                    <EditForm class="p-6 space-y-6" Model="@_newPost" OnValidSubmit="HandleCreatePost">
                        <DataAnnotationsValidator />

                        <div>
                            <label for="community-select" class="block text-sm font-bold text-gray-700">Post to</label>
                            <InputSelect @bind-Value=_newPost.CommunityId id="community-select" class="mt-1 block w-full max-w-xs pl-3 pr-10 py-2 text-base border border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md shadow-sm">
                                <option selected disabled>Choose a community</option>
                                @foreach (CommunitySimpleModel community in UserCommunities)
                                {
                                    <option value="@community.Id">d/@community.Name</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => _newPost.CommunityId)" class="text-red-600 text-sm mt-1" />
                            <p class="mt-2 text-xs text-gray-500">
                                This will help you get your post discovered.
                            </p>
                        </div>

                        <div>
                            <label for="post-title" class="block text-sm font-bold text-gray-700">Title</label>
                            <InputText @bind-Value=_newPost.Title type="text" id="post-title" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="An interesting title" />
                            <ValidationMessage For="@(() => _newPost.Title)" class="text-red-600 text-sm mt-1" />
                            <p class="mt-2 text-xs text-gray-500">
                                A post must have a topic.
                            </p>
                        </div>

                        <div>
                            <label for="post-title" class="block text-sm font-bold text-gray-700">Image Text</label>
                            <InputText @bind-Value=_newPost.ImageUrl type="text" id="post-title" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="An interesting title" />
                            <p class="mt-2 text-xs text-gray-500">
                                This is optional whether you want an image or not.
                            </p>
                        </div>

                        <div>
                            <label for="post-content" class="block text-sm font-bold text-gray-700">Content</label>
                            <InputText @bind-Value=_newPost.Content id="post-content" rows="8" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="Your text post (optional)"></InputText>
                            <p class="mt-2 text-xs text-gray-500">
                                This is optional whether you want content or not.
                            </p>
                        </div>

                        <div class="flex justify-end pt-4 border-t">
                            <div @onclick="GoBack" class="cursor-pointer bg-white py-2 px-4 border border-gray-300 rounded-full shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none">
                                Cancel
                            </div>
                            <button type="submit" class="ml-3 inline-flex justify-center py-2 px-6 border border-transparent shadow-sm text-sm font-bold rounded-full text-white bg-blue-600 hover:bg-blue-700 focus:outline-none">
                                Post
                            </button>
                        </div>
                    </EditForm>
                </div>
            }
            else
            {
                <div class="bg-white rounded-lg shadow-sm text-center p-8">
                    <div class="w-16 h-16 mx-auto bg-blue-100 rounded-full flex items-center justify-center">
                        <svg class="h-8 w-8 text-blue-600"
                             xmlns="http://www.w3.org/2000/svg"
                             fill="none"
                             viewBox="0 0 24 24"
                             stroke-width="1.5"
                             stroke="currentColor">
                            <path stroke-linecap="round"
                                  stroke-linejoin="round"
                                  d="M18 18.72a9.094 9.094 0 003.741-.479 3 3 0 00-4.682-2.72m-7.289 2.72a3 3 0 01-4.682-2.72 9.094 9.094 0 013.741-.479m7.29 2.72a9.094 9.094 0 003.741-.479M12 15a3 3 0 100-6 3 3 0 000 6z" />
                            <path stroke-linecap="round"
                                  stroke-linejoin="round"
                                  d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                    </div>
                    <h2 class="mt-4 text-xl font-bold text-gray-900">
                        Choose a community to post in
                    </h2>
                    <p class="mt-2 text-sm text-gray-600">
                        You need to join a community before you can create a post.
                    </p>
                    <div class="mt-6">
                        <a href="explore"
                           class="inline-flex items-center px-6 py-2 border border-transparent text-sm font-medium rounded-full shadow-sm text-white bg-blue-600 hover:bg-blue-700">
                            Explore Communities
                        </a>
                    </div>
                </div>
            }
        </main>

        <aside class="hidden xl:block py-6">
            <div class="sticky top-6">
                <div class="bg-white border border-gray-200 rounded-lg p-6">
                    <h3 class="text-md font-bold text-gray-900 mb-4">
                        Posting to DeskIt
                    </h3>
                    <ol class="list-decimal list-inside space-y-2 text-sm text-gray-600">
                        <li>Stay on topic</li>
                        <li>Be respectful of other members</li>
                        <li>No self-promotion</li>
                    </ol>
                </div>
            </div>
        </aside>
    </div>
}


@code {
    private UserModel CurrentUser => AuthService.CurrentUser;
    private List<CommunitySimpleModel> UserCommunities => CommunityService.UserCommunityList;

    private bool _isLoading { get; set; }
    private string _errorMessage { get; set; } = null;
    private int _errorCounter { get; set; } = 0;

    private CreatePostModel _newPost = new();

    protected override async Task OnInitializedAsync()
    {
        await ForceReload();
    }

    private async Task ForceReload()
    {
        _isLoading = true;

        _errorMessage = null;

        await CheckCommunitiesExists();

        if (_errorCounter == 0)
        {
            _isLoading = false;
        }
        else
        {
            _errorMessage = "Something went wrong";
            ToastService.ShowError(_errorMessage);
        }

        StateHasChanged();
    }

    private async Task CheckCommunitiesExists()
    {
        _errorMessage = null;
        bool result = await CommunityService.GetUserSimpleCommunitiesAsync(CurrentUser.UserId);

        if (!result)
        {
            _errorCounter++;
        }
    }

    private async Task HandleCreatePost()
    {
        _isLoading = true;

        var error = await PostService.CreatePostAsync(_newPost);
        _isLoading = false;

        if(error == null)
        {
            _isLoading = false;

            _errorMessage = "Post was successfully created";

            ToastService.ShowSuccess(_errorMessage);
            _newPost = new();
        }
        else
        {
            _errorMessage = "Something went wrong";
            ToastService.ShowError(_errorMessage);
        }

        StateHasChanged();
    }

    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    public class CreatePostModel
    {
        [Required(ErrorMessage = "Community is required.")]
        [JsonPropertyName("community")]
        public int CommunityId { get; set; }

        [Required(ErrorMessage = "Title is required.")]
        [JsonPropertyName("title")]
        public string Title { get; set; }

        [JsonPropertyName("content")]
        public string Content { get; set; } = "";

        [JsonPropertyName("image_url")]
        public string ImageUrl { get; set; } = "";
    }
}