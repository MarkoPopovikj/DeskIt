@page "/post/{PostId:int}"

@using Frontend.Models
@using Frontend.Services
@using Frontend.Components.Shared

@inject PostService PostService
@inject CommunityService CommunityService
@inject AuthService AuthService
@inject Blazored.Toast.Services.IToastService ToastService


@if (_isLoading)
{
    <Loading />
}
else
{
    <div class="grid grid-cols-1 xl:grid-cols-3 gap-6">
        <main class="py-6 xl:col-span-2">
            <div class="flex items-center justify-between mb-2">

            </div>

            <div class="bg-white border border-gray-200 rounded-lg">
                <article class="flex">
                    <div class="flex flex-col items-center p-4 bg-gray-50 rounded-l-lg">
                        <button @onclick="UpvotePostClick" class="vote-btn p-1 rounded-md text-gray-500 hover:text-orange-500 @(_currentUserVote == VoteStatus.Upvoted ? "upvoted" : "")">
                            <svg class="h-6 w-6"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor">
                                <path stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M5 15l7-7 7 7" />
                            </svg>
                        </button>

                        <span class="text-base font-bold my-1 text-gray-800">@CurrentPost.VoteScore</span>

                        <button @onclick="DownvotePostClick" class="vote-btn p-1 rounded-md text-gray-500 hover:text-blue-500 @(_currentUserVote == VoteStatus.Downvoted ? "downvoted" : "")">
                            <svg class="h-6 w-6"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor">
                                <path stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M19 9l-7 7-7-7" />
                            </svg>
                        </button>
                    </div>
                    <div class="p-4 flex-1">
                        <div class="text-sm text-gray-500 mb-2">
                            <span>
                                Posted by
                                <a href="user_profile.html" class="hover:underline">u/@CurrentPost.AuthorName</a>
                                @CurrentPost.TimeAgo
                            </span>
                        </div>
                        <h1 class="text-2xl font-bold text-gray-900 mb-4">
                            @CurrentPost.Title
                        </h1>
                        <p class="text-base text-gray-800 leading-relaxed">
                            @CurrentPost.Content
                        </p>
                        <div class="mt-6 flex items-center space-x-4 text-sm font-semibold text-gray-600">
                            <button class="flex items-center space-x-1 hover:bg-gray-100 p-2 rounded-md">
                                <svg class="h-5 w-5"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor">
                                    <path stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                                </svg><span>@CurrentPost.CommentsCount</span>
                            </button>
                        </div>
                    </div>
                </article>
                <div class="p-4 border-t border-gray-200">
                    <p class="text-sm mb-2">
                        Comment as
                        <a href="profile.html" class="text-blue-600 font-semibold">u/@CurrentUser.Username</a>
                    </p>
                    <textarea class="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition"
                    rows="4"
                    placeholder="What are your thoughts?"></textarea>
                    <div class="flex justify-end mt-2">
                        <button class="px-4 py-2 bg-blue-600 text-white font-semibold rounded-full hover:bg-blue-700 transition">
                            Comment
                        </button>
                    </div>
                </div>
                <div class="p-4 space-y-6">
                    <div class="flex space-x-3">
                        <img class="h-8 w-8 rounded-full mt-1"
                        src="https://placehold.co/32x32/16A34A/FFFFFF?text=A"
                        alt="avatar" />
                        <div class="flex-1">
                            <p class="text-sm">
                                <a href="user_profile.html" class="font-bold hover:underline">u/angular_dev</a>
                                <span class="text-gray-500">• 3 hours ago</span>
                            </p>
                            <p class="text-gray-800 mt-1">
                                For me, it was understanding dependency injection in Angular.
                                Suddenly the whole architecture made sense.
                            </p>
                            <div class="flex items-center space-x-3 mt-2 text-xs text-gray-500 font-semibold">
                                <button class="vote-btn p-1">
                                    <svg class="h-4 w-4"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    stroke="currentColor">
                                        <path d="M5 15l7-7 7 7" />
                                    </svg>
                                </button><span class="font-bold text-gray-700">88</span><button class="vote-btn p-1">
                                    <svg class="h-4 w-4"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    stroke="currentColor">
                                        <path d="M19 9l-7 7-7-7" />
                                    </svg>
                                </button><button class="hover:underline">Reply</button>
                            </div>
                            <div class="mt-4 space-y-4 comment-thread">
                                <div class="flex space-x-3">
                                    <img class="h-8 w-8 rounded-full mt-1"
                                    src="https://placehold.co/32x32/D97706/FFFFFF?text=V"
                                    alt="avatar" />
                                    <div class="flex-1">
                                        <p class="text-sm">
                                            <a href="user_profile.html"
                                            class="font-bold hover:underline">u/vue_fan</a>
                                            <span class="text-gray-500">• 2 hours ago</span>
                                        </p>
                                        <p class="text-gray-800 mt-1">
                                            Same! But with Vue's reactivity system. Seeing the DOM
                                            update automatically without manual manipulation was
                                            magic.
                                        </p>
                                        <div class="flex items-center space-x-3 mt-2 text-xs text-gray-500 font-semibold">
                                            <button class="vote-btn p-1">
                                                <svg class="h-4 w-4"
                                                fill="none"
                                                viewBox="0 0 24 24"
                                                stroke="currentColor">
                                                    <path d="M5 15l7-7 7 7" />
                                                </svg>
                                            </button><span class="font-bold text-gray-700">42</span><button class="vote-btn p-1">
                                                <svg class="h-4 w-4"
                                                fill="none"
                                                viewBox="0 0 24 24"
                                                stroke="currentColor">
                                                    <path d="M19 9l-7 7-7-7" />
                                                </svg>
                                            </button><button class="hover:underline">Reply</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>

        <aside class="hidden xl:block py-6">
            <div class="bg-white border border-gray-200 rounded-lg">
                <div class="h-20 bg-[#@CurrentCommunity.BackgroundColor] rounded-t-lg"></div>
                <div class="p-4">
                    <div class="flex items-center space-x-3 -mt-10">
                        <img class="h-16 w-16 rounded-full border-4 border-white bg-white"
                        src="@($"https://placehold.co/64x64/{CurrentCommunity.BackgroundColor}/FFFFFF?text={CurrentCommunity.Name.ToString().ToUpper()[0]}")"
                        alt="r/webdev icon" />
                        <h2 class="text-lg font-bold text-gray-900 mt-8">d/@CurrentCommunity.Name</h2>
                    </div>
                    <div class="flex items-center space-x-1 text-sm text-gray-500 mt-3">
                        <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" />
                            <circle cx="9" cy="7" r="4" />
                            <path d="M22 21v-2a4 4 0 0 0-3-3.87" />
                            <path d="M16 3.13a4 4 0 0 1 0 7.75" />
                        </svg>
                        <span>@CurrentCommunity.MemberCount Members</span>
                    </div>
                    <button class="mt-4 w-full bg-blue-600 text-white font-bold py-2 rounded-full hover:bg-blue-700 transition">
                        Go to community
                    </button>
                </div>
            </div>
        </aside>

    </div>
}


@code {
    [Parameter]
    public int PostId { get; set; }

    private UserModel CurrentUser => AuthService.CurrentUser;
    private PostModel CurrentPost => PostService.CurrentPost;
    private CommunitySimpleModel CurrentCommunity => CommunityService.CurrentPostCommunity;

    private bool _isLoading { get; set; }
    private string _errorMessage { get; set; } = null;
    private int _errorCounter = 0;

    private enum VoteStatus { None, Upvoted, Downvoted }

    private VoteStatus _currentUserVote = VoteStatus.None;

    protected override async Task OnInitializedAsync()
    {
        await ForceReload();
    }

    private async Task ForceReload()
    {
        _isLoading = true;

        await CheckPostExists();
        await CheckCommunityExist();

        if (_errorCounter == 0)
        {
            _isLoading = false;
        }
        else
        {
            _errorMessage = "Something went wrong";
            ToastService.ShowError(_errorMessage);
        }

        StateHasChanged();
    }

    private async Task CheckPostExists()
    {
        bool result = await PostService.GetPostAsync(PostId);

        if (!result)
        {
            _errorCounter++;
        }
    }

    private async Task CheckCommunityExist()
    {
        bool result = await CommunityService.GetPostCommunityAsync(CurrentPost.CommunityName);

        if (!result)
        {
            _errorCounter++;
        }
    }

    private async Task CheckUpvoteDownvote()
    {
        bool result = await PostService.UpdatePostUpvotesDownvotesAsync(PostId, CurrentPost.UpVotes, CurrentPost.DownVotes);

		if (!result)
		{
			_errorMessage = "Something went wrong";
			ToastService.ShowError(_errorMessage);
		}
    }

    private async Task UpvotePostClick()
    {
        if (_currentUserVote == VoteStatus.Upvoted)
        {
            CurrentPost.UpVotes--;
            _currentUserVote = VoteStatus.None;
        }

        else if (_currentUserVote == VoteStatus.Downvoted)
        {
            CurrentPost.DownVotes--;
            CurrentPost.UpVotes++;
            _currentUserVote = VoteStatus.Upvoted;
        }

        else
        {
            CurrentPost.UpVotes++;
            _currentUserVote = VoteStatus.Upvoted;
        }
        
		await CheckUpvoteDownvote();
    }

    private async Task DownvotePostClick()
    {
        if (_currentUserVote == VoteStatus.Downvoted)
        {
            CurrentPost.DownVotes--;
            _currentUserVote = VoteStatus.None;
        }
        else if (_currentUserVote == VoteStatus.Upvoted)
        {
            CurrentPost.UpVotes--;
            CurrentPost.DownVotes++;
            _currentUserVote = VoteStatus.Downvoted;
        }
        else
        {
            CurrentPost.DownVotes++;
            _currentUserVote = VoteStatus.Downvoted;
        }
        
		await CheckUpvoteDownvote();
    }
}
