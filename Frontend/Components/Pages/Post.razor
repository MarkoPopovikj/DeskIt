@page "/post/{PostId:int}"

@using Frontend.Models
@using Frontend.Services
@using Frontend.Components.Shared
@using System.ComponentModel.DataAnnotations
@using System.Text.Json.Serialization

@inject PostService PostService
@inject CommunityService CommunityService
@inject AuthService AuthService
@inject CommentService CommentService
@inject Blazored.Toast.Services.IToastService ToastService
@inject IJSRuntime JSRuntime


@if (_isLoading)
{
    <Loading />
}
else
{
    <div class="grid grid-cols-1 xl:grid-cols-3 gap-6">
        <main class="py-6 xl:col-span-2">
            <div class="flex items-center justify-between mb-2">
                <button @onclick="GoBack" class="p-2 rounded-full hover:bg-gray-200 mr-2">
                    <svg class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                    </svg>
                </button>

                <button @onclick="ForceReload" class="p-2 rounded-full text-gray-500 hover:bg-gray-200 hover:text-gray-800 transition">
                    <svg xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    class="h-6 w-6">
                        <path stroke-linecap="round"
                        stroke-linejoin="round"
                        d="M21 12a9 9 0 11-3-6.708M21 3v6h-6" />
                    </svg>
                </button>
            </div>

            <div class="bg-white border border-gray-200 rounded-lg">
                <article class="flex">
                    <div class="flex flex-col items-center p-4 bg-gray-50 rounded-l-lg">
                        <button @onclick="UpvotePostClick" class="vote-btn p-1 rounded-md text-gray-500 hover:text-orange-500 @(_currentUserVote == VoteStatus.Upvoted ? "upvoted" : "")">
                            <svg class="h-6 w-6"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor">
                                <path stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M5 15l7-7 7 7" />
                            </svg>
                        </button>

                        <span class="text-base font-bold my-1 text-gray-800">@CurrentPost.VoteScore</span>

                        <button @onclick="DownvotePostClick" class="vote-btn p-1 rounded-md text-gray-500 hover:text-blue-500 @(_currentUserVote == VoteStatus.Downvoted ? "downvoted" : "")">
                            <svg class="h-6 w-6"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor">
                                <path stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M19 9l-7 7-7-7" />
                            </svg>
                        </button>
                    </div>
                    <div class="p-4 flex-1">
                        <div class="text-sm text-gray-500 mb-2">
                            <span>
                                Posted by
                                <a href="user_profile.html" class="hover:underline">u/@CurrentPost.AuthorName</a>
                                @CurrentPost.TimeAgo
                            </span>
                        </div>
                        <h1 class="text-2xl font-bold text-gray-900 mb-4">
                            @CurrentPost.Title
                        </h1>

                        @if (!string.IsNullOrEmpty(CurrentPost.ImageUrl))
                        {
                            <img src="@($"https://placehold.co/600x300/E0E7FF/4F46E5?text={CurrentPost.ImageUrl}")"
                            alt="Post image for @CurrentPost.Title"
                            class="w-full max-h-96 object-cover rounded-md border border-gray-200" />
                        }

                        <p class="text-base text-gray-800 leading-relaxed">
                            @CurrentPost.Content
                        </p>
                        <div class="mt-6 flex items-center space-x-4 text-sm font-semibold text-gray-600">
                            <div class="flex items-center space-x-1 hover:bg-gray-100 p-2 rounded-md">
                                <svg class="h-5 w-5"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor">
                                    <path stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                                </svg><span>@CurrentPost.CommentsCount</span>
                            </div>
                        </div>
                    </div>
                </article>

                <EditForm Model="_newComment" OnValidSubmit="HandleCreateComment">
                    <DataAnnotationsValidator />

                    <div class="p-4 border-t border-gray-200">
                        <p class="text-sm mb-2">
                            Comment as
                            <a href="profile.html" class="text-blue-600 font-semibold">u/@CurrentUser.Username</a>
                        </p>
                        <InputTextArea @bind-Value=_newComment.Content class="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition"
                        rows="4"
                        placeholder="What are your thoughts?" />

                        <ValidationMessage For="@(() => _newComment.Content)" class="text-red-600 text-sm mt-1" />

                        <div class="flex justify-end mt-2">
                            <button type="submit" class="px-4 py-2 bg-blue-600 text-white font-semibold rounded-full hover:bg-blue-700 transition">
                                Comment
                            </button>
                        </div>
                    </div>
                </EditForm>

                <CommentCardHolder />

            </div>
        </main>

        <aside class="hidden xl:block py-6">
            <div class="bg-white border border-gray-200 rounded-lg">
                <div class="h-20 bg-[#@CurrentCommunity.BackgroundColor] rounded-t-lg"></div>
                <div class="p-4">
                    <div class="flex items-center space-x-3 -mt-10">
                        <img class="h-16 w-16 rounded-full border-4 border-white bg-white"
                        src="@($"https://placehold.co/64x64/{CurrentCommunity.BackgroundColor}/FFFFFF?text={CurrentCommunity.Name.ToString().ToUpper()[0]}")"
                        alt="r/webdev icon" />
                        <h2 class="text-lg font-bold text-gray-900 mt-8">d/@CurrentCommunity.Name</h2>
                    </div>
                    <div class="flex items-center space-x-1 text-sm text-gray-500 mt-3">
                        <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" />
                            <circle cx="9" cy="7" r="4" />
                            <path d="M22 21v-2a4 4 0 0 0-3-3.87" />
                            <path d="M16 3.13a4 4 0 0 1 0 7.75" />
                        </svg>
                        <span>@CurrentCommunity.MemberCount Members</span>
                    </div>
                    <button class="mt-4 w-full bg-blue-600 text-white font-bold py-2 rounded-full hover:bg-blue-700 transition">
                        Go to community
                    </button>
                </div>
            </div>
        </aside>

    </div>
}

<style>
    .vote-btn.upvoted svg {
    fill: #fd4500;
    stroke: #fd4500;
    }

    .vote-btn.downvoted svg {
    fill: #3b82f6;
    stroke: #3b82f6;
    }
</style>


@code {
    [Parameter]
    public int PostId { get; set; }

    private UserModel CurrentUser => AuthService.CurrentUser;
    private PostModel CurrentPost => PostService.CurrentPost;
    private Dictionary<int, int> UserVotes => PostService.UserPostVotes;
    private CommunitySimpleModel CurrentCommunity => CommunityService.CurrentPostCommunity;
    private List<CommentModel> CommentList => CommentService.PostCommentsList;

    private bool _isLoading { get; set; }
    private string _errorMessage { get; set; } = null;
    private int _errorCounter = 0;

    private enum VoteStatus { None, Upvoted, Downvoted }
    private VoteStatus _currentUserVote = VoteStatus.None;
    private int action { get; set; }

    private CreateCommentModel _newComment { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await ForceReload();
    }

    private async Task ForceReload()
    {
        _isLoading = true;

        await CheckPostExists();
        await CheckCommunityExist();
        await CheckCommentsExits();

        if (UserVotes.ContainsKey(CurrentPost.Id))
        {
            if(UserVotes[CurrentPost.Id] == 1)
            {
                _currentUserVote = VoteStatus.Upvoted;
            }
            else if(UserVotes[CurrentPost.Id] == -1)
            {
                _currentUserVote = VoteStatus.Downvoted;
            }
            else
            {
                _currentUserVote = VoteStatus.None;
            }
        }

        if (_errorCounter == 0)
        {
            _isLoading = false;
        }
        else
        {
            _errorMessage = "Something went wrong";
            ToastService.ShowError(_errorMessage);
        }

        StateHasChanged();
    }

    private async Task CheckPostExists()
    {
        bool result = await PostService.GetPostAsync(PostId);

        if (!result)
        {
            _errorCounter++;
        }
    }

    private async Task CheckCommunityExist()
    {
        bool result = await CommunityService.GetPostCommunityAsync(CurrentPost.CommunityName);

        if (!result)
        {
            _errorCounter++;
        }
    }

    private async Task CheckUpvoteDownvote()
    {
        StateHasChanged();

        bool result = await PostService.UpdatePostUpvotesDownvotesAsync(PostId, action);

        if (!result)
        {
            _errorMessage = "Something went wrong";
            ToastService.ShowError(_errorMessage);
        }
    }

    private async Task CheckCommentsExits()
    {
        bool result = await CommunityService.GetCommunityAsync(CurrentPost.Id);

        if (!result)
        {
            _errorCounter++;
        }
    }

    private async Task UpvotePostClick()
    {
        if (_currentUserVote == VoteStatus.Upvoted)
        {
            CurrentPost.UpVotes--;
            _currentUserVote = VoteStatus.None;
        }

        else if (_currentUserVote == VoteStatus.Downvoted)
        {
            CurrentPost.DownVotes--;
            CurrentPost.UpVotes++;
            _currentUserVote = VoteStatus.Upvoted;
        }

        else
        {
            CurrentPost.UpVotes++;
            _currentUserVote = VoteStatus.Upvoted;
        }

        action = 1;

        await CheckUpvoteDownvote();
    }

    private async Task DownvotePostClick()
    {
        if (_currentUserVote == VoteStatus.Downvoted)
        {
            CurrentPost.DownVotes--;
            _currentUserVote = VoteStatus.None;
        }
        else if (_currentUserVote == VoteStatus.Upvoted)
        {
            CurrentPost.UpVotes--;
            CurrentPost.DownVotes++;
            _currentUserVote = VoteStatus.Downvoted;
        }
        else
        {
            CurrentPost.DownVotes++;
            _currentUserVote = VoteStatus.Downvoted;
        }

        action = -1;

        await CheckUpvoteDownvote();
    }

    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    private async Task HandleCreateComment()
    {
        _newComment.PostId = CurrentPost.Id;

        bool result = await CommentService.CreateCommentAsync(_newComment);

        if (!result)
        {
            _errorMessage = "Something went wrong";
            ToastService.ShowError(_errorMessage);
        }

        StateHasChanged();
    }

    public class CreateCommentModel
    {
        [JsonPropertyName("post")]
        public int PostId { get; set; }

		[JsonPropertyName("content")]
		[Required(ErrorMessage = "Content is required")]
		public string Content { get; set; }
    }
}
