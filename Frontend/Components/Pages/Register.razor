@page "/signup"

@inject NavigationManager NavigationManager
@inject AuthService AuthService

@layout AuthLayout

@using Frontend.Services
@using Frontend.Constants
@using System.ComponentModel.DataAnnotations
@using System.Text.Json.Serialization


<div class="bg-gray-100 flex items-center justify-center h-screen">
    <div class="w-full max-w-md">
        <div class="bg-white shadow-md rounded-lg p-8">
            <div class="flex flex-col items-center mb-6">
                <a href="/" class="flex items-center space-x-2">
                    <svg class="h-10 w-10 text-blue-600" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M12 2L2 7l10 5 10-5-10-5z"></path>
                        <path d="M2 17l10 5 10-5"></path>
                        <path d="M2 12l10 5 10-5"></path>
                    </svg>
                    <span class="text-3xl font-bold text-gray-800">DeskIt</span>
                </a>
                <h2 class="mt-4 text-2xl font-bold text-center text-gray-900">
                    Create your account
                </h2>
            </div>

            <EditForm Model="@registerModel" OnValidSubmit="HandleRegistration" class="space-y-6">
                <DataAnnotationsValidator />

                <div>
                    <label for="email" class="block text-sm font-medium text-gray-700">Email address</label>
                    <div class="mt-1">
                        <InputText id="email" type="email" @bind-Value="registerModel.Email" class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" />
                        <ValidationMessage For="@(() => registerModel.Email)" class="text-red-600 text-sm mt-1" />
                    </div>
                </div>

                <div>
                    <label for="username" class="block text-sm font-medium text-gray-700">Username</label>
                    <div class="mt-1">
                        <InputText id="username" @bind-Value="registerModel.Username" class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" />
                        <ValidationMessage For="@(() => registerModel.Username)" class="text-red-600 text-sm mt-1" />
                    </div>
                </div>

                <div>
                    <label for="password" class="block text-sm font-medium text-gray-700">Password</label>
                    <div class="mt-1">
                        <InputText id="password" type="password" @bind-Value="registerModel.Password" class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" />
                        <ValidationMessage For="@(() => registerModel.Password)" class="text-red-600 text-sm mt-1" />
                    </div>
                </div>

                <div>
                    <label for="confirm-password" class="block text-sm font-medium text-gray-700">Confirm Password</label>
                    <div class="mt-1">
                        <InputText id="confirm-password" type="password" @bind-Value="registerModel.ConfirmPassword" class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" />
                        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" class="text-red-600 text-sm mt-1" />
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="text-red-600 text-sm text-center bg-red-50 p-3 rounded-md">@errorMessage</div>
                }

                <div>
                    <button type="submit" disabled="@isRegistering" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-full shadow-sm text-sm font-bold text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:bg-blue-400 transition-colors">
                        @(isRegistering ? "Creating account..." : "Sign Up")
                    </button>
                </div>
            </EditForm>

            <div class="mt-6">
                <div class="relative">
                    <div class="absolute inset-0 flex items-center">
                        <div class="w-full border-t border-gray-300"></div>
                    </div>
                    <div class="relative flex justify-center text-sm">
                        <span class="px-2 bg-white text-gray-500">
                            Already have an account?
                        </span>
                    </div>
                </div>
                <div class="mt-6">
                    <a href="login" class="w-full flex justify-center py-2 px-4 border border-gray-300 rounded-full shadow-sm bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">
                        Login
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModelChecker registerModel = new();
    private string? errorMessage;
    private bool isRegistering = false;

	private bool arePasswordsTheSame(string password, string confirmPassword)
	{
		return password == confirmPassword;
	}

    private async Task HandleRegistration()
    {
		if (!arePasswordsTheSame(registerModel.Password, registerModel.ConfirmPassword))
		{
			errorMessage = "Passwords do not match.";
			StateHasChanged();
			return;
		}

        isRegistering = true;
		errorMessage = null;
        StateHasChanged();

        var registerData = new RegisterModel
        {
            Email = registerModel.Email,
            Username = registerModel.Username,
            Password = registerModel.Password
        };

		var error = await AuthService.RegisterAsync(registerData);
        isRegistering = false;

        if (error == null)
        {
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            errorMessage = error;
            StateHasChanged();
        }

    }

    public class RegisterModel
    {
        [JsonPropertyName("email")]
        public string Email { get; set; }

        [JsonPropertyName("username")]
        public string Username { get; set; }

        [JsonPropertyName("password")]
        public string Password { get; set; }
    }

    // Need to use to check the confirm password
    public class RegisterModelChecker
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Username is required.")]
        [MinLength(4, ErrorMessage = "Username must be at least 4 characters long.")]
        public string Username { get; set; } = "";

        [Required(ErrorMessage = "Password is required.")]
        [MinLength(8, ErrorMessage = "Password must be at least 8 characters long.")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Please confirm your password.")]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
