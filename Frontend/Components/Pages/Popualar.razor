@page "/popular"
@using Frontend.Models

<div class="max-w-7xl mx-auto px-2 pb-20">
    <div class="grid grid-cols-1 xl:grid-cols-[1fr_320px] gap-4">
        <!-- Main Content Column -->
        <div class="min-w-0">
            <!-- Page Header -->
            <div class="mb-6 text-center py-5">
                <h1 class="text-3xl font-extrabold text-gray-900 mb-2 bg-gradient-to-r from-red-800 to-orange-400 bg-clip-text text-transparent">
                    🔥 Trending Today
                </h1>
                <p class="text-base text-gray-600">
                    Discover what's hot across all communities
                </p>
            </div>

            <!-- Posts Feed -->
            <div class="flex flex-col space-y-4">
                @foreach (var post in posts)
                {
                    <article class="flex bg-white border border-gray-200 rounded-xl shadow-sm hover:border-gray-300 hover:shadow-lg hover:-translate-y-0.5 transition-all duration-300 overflow-hidden">
                        <!-- Voting Section -->
                        <div class="flex flex-col items-center bg-gray-50 p-3 min-w-[60px] border-r border-gray-100 md:min-w-[60px] sm:min-w-[50px]">
                            <button class="flex items-center justify-center w-8 h-8 border-0 bg-transparent rounded-md cursor-pointer transition-all duration-200 text-gray-400 hover:bg-gray-100 hover:text-orange-500 @(post.UserVote == 1 ? "text-orange-500 bg-orange-50" : "")"
                                    @onclick="() => HandleVote(post, 1)">
                                <svg class="w-4.5 h-4.5 stroke-[2.5]" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M5 15l7-7 7 7" />
                                </svg>
                            </button>
                            <span class="text-sm font-bold text-gray-700 my-1">@post.FormattedUpvotes</span>
                            <button class="flex items-center justify-center w-8 h-8 border-0 bg-transparent rounded-md cursor-pointer transition-all duration-200 text-gray-400 hover:bg-gray-100 hover:text-blue-500 @(post.UserVote == -1 ? "text-blue-500 bg-blue-50" : "")"
                                    @onclick="() => HandleVote(post, -1)">
                                <svg class="w-4.5 h-4.5 stroke-[2.5]" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7" />
                                </svg>
                            </button>
                        </div>

                        <!-- Post Content -->
                        <div class="flex-1 p-4 md:p-5">
                            <!-- Post Meta -->
                            <div class="flex items-center gap-1 text-xs text-gray-500 mb-2 flex-wrap">
                                <a href="/community/@post.CommunityName" class="font-bold text-gray-800 hover:text-blue-600 transition-colors">
                                    r/@post.CommunityName
                                </a>
                                <span class="text-gray-300 mx-1">•</span>
                                <span>
                                    Posted by
                                    <a href="/user/@post.AuthorName" class="hover:text-blue-600 transition-colors">u/@post.AuthorName</a>
                                    @post.TimeAgo
                                </span>
                            </div>

                            <!-- Post Title -->
                            <a href="/post/@GetPostSlug(post)" class="block no-underline">
                                <h2 class="text-lg font-bold text-gray-900 leading-snug mb-3 hover:text-blue-600 transition-colors">
                                    @post.Title
                                </h2>
                            </a>

                            <!-- Post Text Content -->
                            @if (!string.IsNullOrEmpty(post.Content))
                            {
                                <div class="text-sm text-gray-700 leading-relaxed mb-4 max-h-[120px] overflow-hidden line-clamp-4">
                                    @post.Content
                                </div>
                            }

                            <!-- Post Image -->
                            @if (!string.IsNullOrEmpty(post.ImageUrl))
                            {
                                <div class="mb-4 rounded-lg overflow-hidden border border-gray-200">
                                    <img src="@post.ImageUrl" alt="Post image" class="w-full h-auto max-h-96 object-cover block" />
                                </div>
                            }

                            <!-- Post Actions -->
                            <div class="flex items-center gap-2 flex-wrap">
                                <a href="/post/@GetPostSlug(post)" class="flex items-center gap-1.5 px-3 py-2 border-0 bg-transparent rounded-md text-xs font-semibold text-gray-500 cursor-pointer transition-all duration-200 hover:bg-blue-50 hover:text-blue-600 no-underline">
                                    <svg class="w-4 h-4 stroke-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round"
                                              d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                                    </svg>
                                    <span class="sm:inline hidden">@post.CommentsCount Comments</span>
                                </a>
                            </div>
                        </div>
                    </article>
                }
            </div>

            @if (isLoading)
            {
                <div class="flex flex-col items-center py-10 gap-4">
                    <div class="w-8 h-8 border-3 border-gray-200 border-t-blue-600 rounded-full animate-spin"></div>
                    <p class="text-sm text-gray-600 m-0">Loading more posts...</p>
                </div>
            }
        </div>

        <!-- Trending Communities Sidebar -->
        <aside class="hidden xl:block">
            <div class="sticky top-6">
                <div class="bg-white border border-gray-200 rounded-xl p-5 shadow-sm">
                    <h3 class="text-base font-bold text-gray-900 mb-4 pb-3 border-b border-gray-100">
                        General Topics
                    </h3>
                    <ul class="space-y-4">
                        @foreach (var community in trendingCommunities)
                        {
                            <li class="flex items-center justify-between group">
                                <div class="flex items-center space-x-3 min-w-0 flex-1">
                                    <div class="relative flex-shrink-0">
                                        <img class="h-8 w-8 rounded-full ring-2 ring-white shadow-sm"
                                             src="@community.IconUrl"
                                             alt="@community.Name icon" />
                                        @if (community.IsVerified)
                                        {
                                            <div class="absolute -top-1 -right-1 w-4 h-4 bg-blue-500 rounded-full flex items-center justify-center">
                                                <svg class="w-2.5 h-2.5 text-white" fill="currentColor" viewBox="0 0 20 20">
                                                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                                                </svg>
                                            </div>
                                        }
                                    </div>
                                    <div class="min-w-0 flex-1">
                                        <a href="/community/@community.Name"
                                           class="font-semibold text-sm text-gray-900 hover:text-blue-600 transition-colors truncate block">
                                            r/@community.Name
                                        </a>
                                        <p class="text-xs text-gray-500 truncate">
                                            @community.FormattedMemberCount members
                                        </p>
                                    </div>
                                </div>
                                <button class="@GetJoinButtonClass(community.IsJoined)"
                                        @onclick="() => ToggleJoin(community)">
                                    @(community.IsJoined ? "Joined" : "Join")
                                </button>
                            </li>
                        }
                    </ul>

                    <div class="mt-6 pt-4 border-t border-gray-100">
                        <a href="/communities"
                           class="flex items-center justify-center w-full px-4 py-2 text-sm font-medium text-blue-600 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                            </svg>
                            View All Communities
                        </a>
                    </div>
                </div>

               

                <!-- Create Community CTA -->
                <div class="bg-gradient-to-r from-blue-500 to-purple-600 rounded-xl p-5 shadow-sm mt-6 text-white">
                    <h3 class="text-base font-bold mb-2">
                        Create a Community
                    </h3>
                    <p class="text-sm text-blue-100 mb-4">
                        Build your own space and connect with like-minded people
                    </p>
                    <button class="w-full px-4 py-2 bg-white text-blue-600 rounded-lg font-medium text-sm hover:bg-gray-50 transition-colors"
                            @onclick="CreateCommunity">
                        Get Started
                    </button>
                </div>
            </div>
        </aside>
    </div>
</div>



@code {
    private List<PostViewModel> posts = new();
    private List<TrendingCommunity> trendingCommunities = new();
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadPosts();
        LoadTrendingCommunities();
    }

    private async Task LoadPosts()
    {
        isLoading = true;
        StateHasChanged();

        // Simulate loading delay
        // await Task.Delay(500);

        // Sample data - replace with your actual data service
        posts = new List<PostViewModel>
        {
            new PostViewModel
            {
                CommunityName = "gaming",
                AuthorName = "master_chief",
                Title = "What's a game that you think is a 10/10 masterpiece?",
                Content = "Ignoring the hype and reviews, what game is a perfect 10 in your heart? For me, it has to be The Witcher 3. The world, the story, the characters... just flawless.",
                CreatedAt = DateTime.Now.AddHours(-11),
                UpVotes = 22700,
                DownVotes = 1200,
                CommentsCount = 2100,
                UserVote = 0
            },
            new PostViewModel
            {
                CommunityName = "technology",
                AuthorName = "future_is_now",
                Title = "This AI can generate video from a single text prompt",
                Content = "The future of content creation is here. This breakthrough technology can create stunning videos from simple text descriptions.",
                CreatedAt = DateTime.Now.AddHours(-6),
                UpVotes = 15100,
                DownVotes = 800,
                CommentsCount = 985,
                ImageUrl = "https://picsum.photos/600/300?random=1",
                UserVote = 0
            },
            new PostViewModel
            {
                CommunityName = "science",
                AuthorName = "lab_researcher",
                Title = "Major breakthrough in quantum computing achieved",
                Content = "Scientists have successfully demonstrated quantum supremacy in a new domain, potentially revolutionizing computing as we know it.",
                CreatedAt = DateTime.Now.AddHours(-4),
                UpVotes = 18900,
                DownVotes = 500,
                CommentsCount = 1500,
                UserVote = 0
            },
            new PostViewModel
            {
                CommunityName = "programming",
                AuthorName = "code_ninja",
                Title = "Why I switched from React to Blazor and never looked back",
                Content = "After 5 years with React, I decided to give Blazor a try. Here's my honest experience and why I'm never going back.",
                CreatedAt = DateTime.Now.AddHours(-2),
                UpVotes = 8400,
                DownVotes = 1200,
                CommentsCount = 650,
                UserVote = 0
            },
            new PostViewModel
            {
                CommunityName = "cooking",
                AuthorName = "chef_extraordinaire",
                Title = "Homemade pasta vs store-bought: The ultimate comparison",
                Content = "I spent a week making pasta from scratch and comparing it to various store-bought options. The results might surprise you!",
                CreatedAt = DateTime.Now.AddHours(-1),
                UpVotes = 5200,
                DownVotes = 300,
                CommentsCount = 420,
                ImageUrl = "https://picsum.photos/600/400?random=2",
                UserVote = 0
            }
        };

        isLoading = false;
        StateHasChanged();
    }

    private void LoadTrendingCommunities()
    {
        // Sample trending communities - replace with your actual data service
        trendingCommunities = new List<TrendingCommunity>
        {
            new TrendingCommunity
            {
                Name = "science",
                IconUrl = "https://placehold.co/32x32/FBBF24/FFFFFF?text=S",
                MemberCount = 2800000,
                IsJoined = false,
                IsVerified = true
            },
            new TrendingCommunity
            {
                Name = "technology",
                IconUrl = "https://placehold.co/32x32/3B82F6/FFFFFF?text=T",
                MemberCount = 1900000,
                IsJoined = true,
                IsVerified = true
            },
            new TrendingCommunity
            {
                Name = "programming",
                IconUrl = "https://placehold.co/32x32/6366F1/FFFFFF?text=P",
                MemberCount = 1200000,
                IsJoined = false,
                IsVerified = true
            },
           
        };
    }

    private string GetJoinButtonClass(bool isJoined)
    {
        return isJoined
            ? "px-3 py-1 text-xs font-semibold text-green-700 bg-green-100 border border-green-200 rounded-full hover:bg-green-200 transition-colors"
            : "px-3 py-1 text-xs font-semibold text-blue-600 bg-blue-50 border border-blue-200 rounded-full hover:bg-blue-100 transition-colors";
    }

    private async Task ToggleJoin(TrendingCommunity community)
    {
        community.IsJoined = !community.IsJoined;
        StateHasChanged();

        // Here you would call your actual API to join/leave the community
        await Task.CompletedTask;
    }

    private async Task CreateCommunity()
    {
        // Navigate to create community page or show modal
        await Task.CompletedTask;
    }

    private async Task HandleVote(PostViewModel post, int vote)
    {
        if (post.UserVote == vote)
        {
            // Remove vote
            post.UpVotes += post.UserVote == 1 ? -1 : 0;
            post.DownVotes += post.UserVote == -1 ? -1 : 0;
            post.UserVote = 0;
        }
        else
        {
            // Change vote
            if (post.UserVote != 0)
            {
                post.UpVotes += post.UserVote == 1 ? -1 : 0;
                post.DownVotes += post.UserVote == -1 ? -1 : 0;
            }

            post.UserVote = vote;
            if (vote == 1)
                post.UpVotes++;
            else
                post.DownVotes++;
        }

        StateHasChanged();
    }

    

   

    private string GetPostSlug(PostViewModel post)
    {
        return post.Title.ToLower()
            .Replace(" ", "-")
            .Replace("?", "")
            .Replace("!", "")
            .Replace("'", "")
            .Replace(":", "");
    }

    // Trending Community model
    public class TrendingCommunity
    {
        public required string Name { get; set; }
        public required string IconUrl { get; set; }
        public int MemberCount { get; set; }
        public bool IsJoined { get; set; }
        public bool IsVerified { get; set; }

        public string FormattedMemberCount
        {
            get
            {
                if (MemberCount >= 1000000)
                {
                    return $"{((double)MemberCount / 1000000):0.0}M";
                }
                if (MemberCount >= 1000)
                {
                    return $"{((double)MemberCount / 1000):0.0}k";
                }
                return MemberCount.ToString();
            }
        }
    }
    public class PostViewModel : Post
    {
        public int UserVote { get; set; } = 0; // -1 = downvote, 0 = no vote, 1 = upvote

        public new string FormattedUpvotes
        {
            get
            {
                var totalScore = UpVotes - DownVotes;
                if (totalScore >= 1000)
                {
                    return $"{((double)totalScore / 1000):0.0}k";
                }
                return totalScore.ToString();
            }
        }
    }
}


      